import asyncio, configparser, config, logging
from aiogram import Bot, Dispatcher, executor, types

logging.basicConfig(filename="app.log", filemode="w", level=logging.INFO)

bot = Bot(token=config.get_bot_token())
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await bot.send_message(message.from_user.id, '–ë–∏–ø-–±–∏–ø...\n–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å—É (Covid-19)ü¶†', reply_markup=config.main_k)
    await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAIIgF65ucQNXFE8q86mjl_E3OuLiPXzAALOAQACVp29Cq2jmuzmnvpMGQQ')
    await bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É\nüòâ üîΩ')


@dp.message_handler(content_types=['text'])
async def send_data(message: types.Message):

    user_id = message.from_user.id
    text = message.text.strip()


    # main page

    if text== '–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üìä':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ –∫–∞–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å üòâ üîΩ', reply_markup=config.static_k)

    elif text== '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –í–û–ó üò∑':
        m = types.InlineKeyboardMarkup(True)
        btn = types.InlineKeyboardButton(text='–°–∞–π—Ç –í–û–ó üåç', url='www.who.int/ru/emergencies/diseases/novel-coronavirus-2019')
        m.add(btn)
        await bot.send_message(user_id, '–í—Å–µ–º–∏—Ä–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', reply_markup=m)
        await bot.send_sticker(user_id, 'CAACAgIAAxkBAAIIoV65vLrWbECKVD86BVQLM14hUQr4AALyAQACVp29CgqJR4ysf4fyGQQ')

    elif text== '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—ç–∫—Ç–µ':
        await bot.send_message(user_id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—ç–∫—Ç–µ', reply_markup=config.info_k)


    # static page

    elif text== '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –†–æ—Å—Å–∏–∏ üá∑üá∫':
        await bot.send_message(user_id, config.get_data("russia", "–†–æ—Å—Å–∏–∏ üá∑üá∫"), reply_markup=config.static_k)

    elif text== '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –º–∏—Ä–µ üåç':
        await bot.send_message(user_id, config.get_data("world", ""), reply_markup=config.static_k)

    elif text== '–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–µ':
        await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã', reply_markup=config.find_k)

    elif text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é üîÑ':
        await bot.send_message(user_id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=config.main_k)

    elif (text.lower() in config.ru_country.keys()) or (text.lower() in config.db):
        country = text.lower()
        if country.lower() in config.ru_country.keys():
            country = config.ru_country[country.lower()]
        await bot.send_message(user_id, config.get_data(country, text), reply_markup=config.find_k)


    # info page

    elif text== '–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã':
        await bot.send_message(user_id, '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - worldometers.info', reply_markup=config.main_k)

    else:
        if (config.word_filter(text)):
            await bot.send_message(user_id, '–ù–µ–Ω–∞–¥–æ —Ç–∞–∫ üò£üò≠')
        else:
            await bot.send_message(user_id, '–Ø –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ üòî')


async def update_data(whait_for=3600):
    while True:
        config.update_data()
        await asyncio.sleep(whait_for)


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(update_data(10800))
    executor.start_polling(dp, skip_updates=True)
